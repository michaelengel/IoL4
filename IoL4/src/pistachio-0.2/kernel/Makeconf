# -*- mode: Makefile; -*-
######################################################################
#                
# Copyright (C) 1999, 2000, 2001,  Karlsruhe University
#                
# File path:     Makeconf
# Description:   Make settings for pistachio
#                
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#                
# $Id: Makeconf,v 1.71.2.1 2003/06/20 16:38:30 skoglund Exp $
#                
######################################################################

# requires:
#	find
#	perl


# specify the search path for source files 
vpath %.cc	$(BUILDDIR):$(SRCDIR)
vpath %.c	$(BUILDDIR):$(SRCDIR)
vpath %.S	$(BUILDDIR):$(SRCDIR)


# source config tool settings so we know what the target will be
-include $(BUILDDIR)/config/.config

# Tools
ECHO=		echo
ECHO_MSG=	$(ECHO) ===\>
MKDIRHIER=	$(SRCDIR)/../tools/mkdirhier
RM_F=		rm -f
PERL?=		perl
FIND=		find
GREP=		grep
SED=		sed
AWK=		awk
CAT=		cat
TR=		tr
PRINTF=		printf

# Go fishing for cross development toolchain
# we take the first one reported by type -p <list>
TOOLPREFIX?=	$(subst gcc,,$(firstword $(shell type -p $(ARCH)-linux-gcc $(ARCH)-elf-gcc)))

# If CC was not given by user, default to GCC for target architecture
ifeq "$(origin CC)" "default"
CC=		$(TOOLPREFIX)gcc
endif

GCCINSTALLDIR?= $(dir $(shell $(CC) -print-libgcc-file-name))
LIBGCCINC?= $(GCCINSTALLDIR)include
LIBGCCDIR?= $(GCCINSTALLDIR)

# Some CCs (e.g., the native FreeBSD gcc) does not follow the regular
# gcc convetions when it comes to the gcc include files.
__STDARG_H=	$(wildcard $(LIBGCCINC)/stdarg.h)
ifeq "$(__STDARG_H)" ""
LIBGCCINC=	/usr/include
endif


ifeq "$(origin LD)" "default"
LD=		$(TOOLPREFIX)ld
endif
ifeq "$(origin AR)" "default"
AR=		$(TOOLPREFIX)ar
endif
OBJCOPY?=	$(TOOLPREFIX)objcopy
NM?=		$(TOOLPREFIX)nm


# the preprocessor
CPP=		$(TOOLPREFIX)cpp


API=v4


# these macros will be undefined first - they may have default values
UNDEFS	 += $(ARCH) $(CPU) $(PLATFORM) $(API)
DEFINES	 += __ARCH__=$(ARCH) __CPU__=$(CPU) __PLATFORM__=$(PLATFORM) __API__=$(API) $(DEFINES_$(ARCH))

INCLUDES += $(BUILDDIR)/include $(SRCDIR)/include $(LIBGCCINC)




######################################################################
#
# Preprocessor flags
#

# preprocessor flags - common to ALL source files
PPFLAGS += -nostdinc \
	   $(addprefix -I, $(INCLUDES)) \
	   $(addprefix -U, $(UNDEFS)) \
	   $(addprefix -D, $(DEFINES)) \
	   -imacros $(BUILDDIR)/config/config.h \
	   -imacros $(SRCDIR)/include/macros.h \
	   -include $(SRCDIR)/include/config.h

# C/C++ preprocessor flags
CPPFLAGS += $(PPFLAGS) -include $(SRCDIR)/include/types.h
# Asm preprocessor flags
APPFLAGS += -DASSEMBLY $(PPFLAGS)





######################################################################
#
# Hardware specific options
#
# Known so far: CFLAGS_<arch>, CFLAGS_<cpu>, CFLAGS_<platform>
#               ASMFLAGS_<arch>

CFLAGS_ia32+=	-O2 -mpreferred-stack-boundary=2
CFLAGS_i586+=	-march=i586
CFLAGS_i686+=	-march=i686
CFLAGS_p4  +=	-march=i686
LIBS_ia32  +=   -lgcc

CFLAGS_ia64+=	-O2 -freg-struct-return -mconstant-gp -finline-limit=999999
ASMFLAGS_ia64+=	-mconstant-gp
# eSk says: CML2 is complete and utter crap.  There is no way to
# unconditionally set a simple variable.
DEFINES_ia64+=	CONFIG_IA64_PHYSMEM_OFFSET=0x100000000

CFLAGS_powerpc	+= -Os -freg-struct-return -msoft-float -mregnames -meabi \
		   -msdata=none -mno-toc -finline-limit=31011975 \
		   -fcall-used-r13 -fcall-used-r14 -fcall-used-r15 \
		   -fcall-used-r16 -fcall-used-r17 -fcall-used-r18 \
		   -fcall-used-r19 -fcall-used-r20 -fcall-used-r21 \
		   -fcall-used-r22 -fcall-used-r23 -fcall-used-r24 \
		   -fcall-used-r25 -fcall-used-r26 -fcall-used-r27 \
		   -fcall-used-r28 -fcall-used-r29 -fno-rtti
ifneq ($(CONFIG_SYSV_ABI),y)
CFLAGS_powerpc	+= -mfast-structs
endif
ifeq ($(CONFIG_PPC_MULTIWORD_INSTR),y)
CFLAGS_powerpc	+= -mmultiple
else
CFLAGS_powerpc	+= -mno-multiple
endif
CFLAGS_ibm750	+= -mcpu=750

CFLAGS_arm	+= -O2 -mlong-calls -march=armv4
ASMFLAGS_arm	+= -mno-fpu
LDFLAGS_arm	+= -soft-float
LIBS_arm	+= -lgcc
CFLAGS_sa1100	+= -mtune=strongarm1100

LDFLAGS_alpha   += 
CFLAGS_alpha    += -O2 -mno-fp-regs -freg-struct-return
CFLAGS_a21264   += -mcpu=ev6
CFLAGS_a21164   += -mcpu=ev5
CFLAGS_a21064   += -mcpu=ev4

CFLAGS_mips64	+= -O3 -G 0 -mlong64 -mno-abicalls -non_shared -msplit-addresses

# Mips64 Compile Note: cvansch - UNSW
#  GNU GCC/Binutils are broken for anything but ABI=o64
#  We support the ABI=64 calling convention
#  GCC is not broken for ABI=64 however GAS and LD are.
#  Temporary solution is to let GCC generate ABI=64 code
#  and pass ABI=o64 to the assembler.
#  This works consistantly with diferent GCC/binutils
#  versions and has a side effect of producing optimised
#  address calculation.
ifeq ($(PLATFORM),erpcn01)
LDFLAGS_mips64   += -EL
CFLAGS_rc64574  += -EL -mcpu=r5000 -mips4 -mabi=64 -Wa,-mabi=o64
ASMFLAGS_mips64  += $(CFLAGS_mips64) $(CFLAGS_rc64574)
endif

ifeq ($(PLATFORM),u4600)
LDFLAGS_mips64   += -EB
CFLAGS_r4x00  += -EB -mcpu=r4000 -mips3 -mabi=64 -Wa,-mabi=o64
ASMFLAGS_mips64  += $(CFLAGS_mips64) $(CFLAGS_r4x00)
endif

ifeq ($(PLATFORM),sb1)
LDFLAGS_mips64   += -EB
CFLAGS_sb1  += -EB -mcpu=sb1 -mips4 -mabi=64 -Wa,-mabi=o64
ASMFLAGS_mips64  += $(CFLAGS_mips64) $(CFLAGS_sb1)
endif

######################################################################
#
# Compiler/Assembler/Linker flags
#

# use optimization level of at least 1 - otherwise inlining will fail
CFLAGS += -fno-builtin -ffreestanding -fomit-frame-pointer -fno-exceptions \
	  -Wall -Wno-format -Wconversion \
	  $(CFLAGS_$(ARCH)) $(CFLAGS_$(CPU)) $(CFLAGS_$(PLATFORM)) 

# these for assembly files only
ASMFLAGS += $(ASMFLAGS_$(ARCH))


LIBDIRS += $(LIBGCCDIR)
LIBS += $(LIBS_$(ARCH))
LDFLAGS += -static -O2 $(LDFLAGS_$(ARCH)) $(addprefix -L,$(LIBDIRS))




# rules to build object files from source files follow
# C++ files
%.o:	%.cc
	@$(ECHO_MSG) $(subst $(SRCDIR)/,,$<)
	@if [ ! -d $(dir $@) ]; then $(MKDIRHIER) $(dir $@); fi
	cd $(dir $@) && $(CC) $(CPPFLAGS) $(CFLAGS) $(CFLAGS_$*) -x c++ -c $<


# C files
%.o:	%.c
	@$(ECHO_MSG) $(subst $(SRCDIR)/,,$<)
	@if [ ! -d $(dir $@) ]; then $(MKDIRHIER) $(dir $@); fi
	cd $(dir $@) && $(CC) $(CPPFLAGS) $(CFLAGS) $(CFLAGS_$*) -c $<

# assembly files
%.o:	%.S
	@$(ECHO_MSG) $(subst $(SRCDIR)/,,$<)
	@if [ ! -d $(dir $@) ]; then $(MKDIRHIER) $(dir $@); fi
	cd $(dir $@) && $(CC) $(APPFLAGS) $(ASMFLAGS) $(ASMFLAGS_$*) -c $<



# where to search for files with lists of files to build (Makeconf)
SRCSRC = src/generic src/platform/$(PLATFORM) src/api/$(API) \
	 src/arch/$(ARCH) src/arch/$(ARCH)/$(CPU) \
	 src/glue/$(API)-$(ARCH) src/glue/$(ARCH)-$(PLATFORM) \
	 src/glue/$(API)-$(PLATFORM)

ifeq "$(CONFIG_DEBUG)" "y"
SRCSRC+= kdb/generic kdb/platform/$(PLATFORM) kdb/api/$(API) \
	 kdb/arch/$(ARCH) kdb/arch/$(ARCH)/$(CPU) \
	 kdb/glue/$(API)-$(ARCH) kdb/glue/$(ARCH)-$(PLATFORM) \
	 kdb/glue/$(API)-$(PLATFORM) kdb
endif

# include the files with lists of source files
# these files should contain lines: SOURCES += ...   NOTE the +!!!
-include $(addprefix $(SRCDIR)/, $(addsuffix /Makeconf, $(SRCSRC)))


# build list of object files from list of source files
# Source files live under SRCDIR. Object files will go into the
# respective directories but under BUILDDIR
OBJS	=$(patsubst %.cc, %.o, \
	  $(patsubst %.c, %.o, \
	   $(patsubst %.S, %.o, \
	    $(patsubst $(SRCDIR)%, $(BUILDDIR)%, $(SOURCES)))))

.INTERMEDIATE: lds.tmp
lds.tmp:	$(SRCDIR)/src/platform/$(PLATFORM)/linker.lds $(SRCDIR)/Makeconf $(SRCDIR)/include/macros.h $(BUILDDIR)/config/config.h
	@$(CPP) -DASSEMBLY $(PPFLAGS) -P -C $< -o $@

# link the final binary
$(ARCH)-kernel:	$(BUILDDIR)/Makeconf.local $(OBJS) lds.tmp
	@$(ECHO_MSG) Linking $@
	$(LD) $(LDFLAGS) -Tlds.tmp -o $@ $(OBJS) $(LIBS)


# things that must be rebuilt every time should depend on phony
.PHONY: phony

# configuration - forward target to config/Makefile
xconfig menuconfig:
	@$(MAKE) -C $(BUILDDIR)/config -f $(SRCDIR)/config/Makefile $@


#
clean::
	@$(RM) `$(FIND) . -name "*.[oasi]" -o -name "*.ii"`
	@$(RM) $(ARCH)-kernel .depend


.depend:	$(SOURCES) $(SYMSRCS) $(BUILDDIR)/Makeconf.local $(wildcard $(addprefix $(SRCDIR)/, $(addsuffix /Makeconf, $(SRCSRC))))
	@$(RM_F) $@
	@if [ ! -d $(BUILDDIR)/include ]; then $(MKDIRHIER) $(BUILDDIR)/include; fi
#	@$(ECHO_MSG) Building dependencies for $(SOURCES) $(SYMSRCS)
	@for f in $(SOURCES) $(SYMSRCS); do \
	  case $$f in *.S) FLAGS="$(APPFLAGS)"; ;; *) FLAGS="$(CPPFLAGS)"; ;; esac ; \
	  $(CPP) $$FLAGS -w -M -MG $(addprefix $(SRCDIR)/,$$f) | \
	  $(PERL) -pe 's/^(.*):[ \t]+\\\n/\1:/g' | $(PERL) -pe 's/^(.*)\.o:[ \t]+$(subst /,\/,$(SRCDIR))\/(.*)\/\1(.*)/.depend \2\/\1.o: $(subst /,\/,$(SRCDIR))\/\2\/\1\3/' >> $@; \
	done 2>&1 | $(GREP) . && $(RM_F) $@ && exit -1 || exit 0

ifeq "$(filter clean celan %config, $(MAKECMDGOALS))" ""
-include .depend
endif

include $(SRCDIR)/Makefile.voodoo
